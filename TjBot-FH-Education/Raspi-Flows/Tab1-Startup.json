[
    {
        "id": "650ea4c6.6bf0dc",
        "type": "tab",
        "label": "Startup",
        "disabled": false,
        "info": ""
    },
    {
        "id": "e1141f58.5bdd4",
        "type": "comment",
        "z": "650ea4c6.6bf0dc",
        "name": "Inital Config of TJBot",
        "info": "",
        "x": 120,
        "y": 40,
        "wires": []
    },
    {
        "id": "8b891fb9.a2d3d",
        "type": "inject",
        "z": "650ea4c6.6bf0dc",
        "name": "Startup",
        "topic": "",
        "payload": "Startup",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": true,
        "x": 104,
        "y": 156,
        "wires": [
            [
                "c7d83bc6.261978",
                "ba5fa57b.ad1ec8",
                "ced68678.708548"
            ]
        ]
    },
    {
        "id": "c7d83bc6.261978",
        "type": "exec",
        "z": "650ea4c6.6bf0dc",
        "command": "ifconfig eth0",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "eth0",
        "x": 310,
        "y": 92,
        "wires": [
            [
                "db99fefa.95ec2"
            ],
            [],
            []
        ]
    },
    {
        "id": "db99fefa.95ec2",
        "type": "function",
        "z": "650ea4c6.6bf0dc",
        "name": "Extract eth0",
        "func": "// Initialize variables\nvar tokens, inet, bcast, mask;\nvar eth0 =   {\n    \"ip\" : null, \n    \"bcast\" : null, \n    \"mask\" : null\n}\n\n// Parse the entire string by spaces, and put each item into an array called tokens\ntokens = msg.payload.split(\"\\n\", 4);\nmsg.tokens = tokens;\n\n// check if IP exists\nif (tokens[1].indexOf('inet') == -1) {\n    msg.eth0 = eth0;\n    return msg;\n}\n\n// split possible ip\ntokens[1] = tokens[1].substr(tokens[1].indexOf('inet'));\ninet = tokens[1].split(\" \");\n\neth0.ip = inet[1];\neth0.bcast = inet[7];\neth0.mask = inet[4];\n\n// Don't send a message if the IF is the known default. Change to default ip.\nif (eth0.ip==\"192.168.0.120\") { \n    //outString = \"\"; // set output to null if ip is the same so no message is sent\n    msg.payload = \"NoIp\";\n} else {\n    // return the final output\n    msg.payload = eth0.ip;\n}\n\nmsg.eth0 = eth0;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 491.00002670288086,
        "y": 80.00000238418579,
        "wires": [
            [
                "2a79da68.945df6"
            ]
        ]
    },
    {
        "id": "d42ae381.6fb2f",
        "type": "rpi-sensehat out",
        "z": "650ea4c6.6bf0dc",
        "name": "",
        "x": 782,
        "y": 361.5,
        "wires": []
    },
    {
        "id": "ba5fa57b.ad1ec8",
        "type": "exec",
        "z": "650ea4c6.6bf0dc",
        "command": "hostname",
        "addpay": false,
        "append": "",
        "useSpawn": "",
        "timer": "",
        "name": "hostname",
        "x": 320.0000190734863,
        "y": 155.00001525878906,
        "wires": [
            [
                "b07d6588.5853c8"
            ],
            [],
            []
        ]
    },
    {
        "id": "b07d6588.5853c8",
        "type": "function",
        "z": "650ea4c6.6bf0dc",
        "name": "Get Hostname",
        "func": "msg.payload = msg.payload.slice(0,msg.payload.length-1);\n\nglobal.set(\"device\", msg.payload);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 504,
        "y": 136,
        "wires": [
            [
                "2b1578a1.838ee8"
            ]
        ]
    },
    {
        "id": "27a302b.2b7c8fe",
        "type": "change",
        "z": "650ea4c6.6bf0dc",
        "name": "Loop Init",
        "rules": [
            {
                "t": "set",
                "p": "loop",
                "pt": "flow",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 154,
        "y": 418,
        "wires": [
            [
                "6e6d21cc.078b1"
            ]
        ]
    },
    {
        "id": "6e6d21cc.078b1",
        "type": "switch",
        "z": "650ea4c6.6bf0dc",
        "name": "",
        "property": "loop",
        "propertyType": "flow",
        "rules": [
            {
                "t": "lt",
                "v": "3",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 325,
        "y": 418,
        "wires": [
            [
                "f68ab89b.bbcef8"
            ],
            []
        ]
    },
    {
        "id": "a2908b6d.f271a8",
        "type": "function",
        "z": "650ea4c6.6bf0dc",
        "name": "Increase",
        "func": "var count = flow.get('loop') || 0;\ncount += 1;\nflow.set('loop', count);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 388,
        "y": 361,
        "wires": [
            [
                "6e6d21cc.078b1",
                "cde71acf.1fdc48"
            ]
        ]
    },
    {
        "id": "fc4afb6e.aa10d8",
        "type": "link out",
        "z": "650ea4c6.6bf0dc",
        "name": "Show IP",
        "links": [
            "bfb82d3b.abd8e"
        ],
        "x": 1142.0001945495605,
        "y": 67.00000953674316,
        "wires": []
    },
    {
        "id": "bfb82d3b.abd8e",
        "type": "link in",
        "z": "650ea4c6.6bf0dc",
        "name": "",
        "links": [
            "fc4afb6e.aa10d8"
        ],
        "x": 36,
        "y": 418,
        "wires": [
            [
                "27a302b.2b7c8fe"
            ]
        ]
    },
    {
        "id": "f68ab89b.bbcef8",
        "type": "delay",
        "z": "650ea4c6.6bf0dc",
        "name": "Wait",
        "pauseType": "delay",
        "timeout": "20",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 474,
        "y": 418,
        "wires": [
            [
                "a2908b6d.f271a8"
            ]
        ]
    },
    {
        "id": "cde71acf.1fdc48",
        "type": "function",
        "z": "650ea4c6.6bf0dc",
        "name": "HAT Msg",
        "func": "var hostname = global.get(\"device\") || \"\";\nvar ip = global.get(\"IP\");\nvar rotation = global.get(\"rotation\");\n\nif (rotation) {\n    msg.payload = rotation + \"\\n\" + hostname + \" : \" + ip.ip;\n} else {\n    msg.payload = hostname + \" : \" + ip.ip;\n}\nmsg.speed = 4;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 588,
        "y": 361,
        "wires": [
            [
                "d42ae381.6fb2f",
                "f60e9d8.326146"
            ]
        ]
    },
    {
        "id": "2b1578a1.838ee8",
        "type": "debug",
        "z": "650ea4c6.6bf0dc",
        "name": "Hostsname",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 694,
        "y": 136,
        "wires": []
    },
    {
        "id": "6fa6ef9e.d9461",
        "type": "comment",
        "z": "650ea4c6.6bf0dc",
        "name": "Show local IP - 3 Times",
        "info": "",
        "x": 120,
        "y": 326,
        "wires": []
    },
    {
        "id": "9414bd24.bfd72",
        "type": "function",
        "z": "650ea4c6.6bf0dc",
        "name": "Set IP Global",
        "func": "var ip = \"NO-IP\";\nif (msg.eth0.ip.length > 0) {\n    global.set(\"IP\", msg.eth0);\n    ip = msg.eth0.ip;\n} else {\n    if (msg.wlan0.ip.length > 0) {\n        global.set(\"IP\", msg.wlan0);\n        ip = msg.wlan0.ip;\n    }\n}\nvar url = \"http://\" + ip + \":1880\";\n\n// Set the Application URL (local)\nglobal.set(\"appurl\", url);\n\n// Set the IP-Address used by TJBot\nglobal.set(\"ipaddr\", ip);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1025.0000762939453,
        "y": 67.0000057220459,
        "wires": [
            [
                "fc4afb6e.aa10d8"
            ]
        ]
    },
    {
        "id": "f60e9d8.326146",
        "type": "debug",
        "z": "650ea4c6.6bf0dc",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 782,
        "y": 420,
        "wires": []
    },
    {
        "id": "2a79da68.945df6",
        "type": "exec",
        "z": "650ea4c6.6bf0dc",
        "command": "ifconfig wlan0",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "wlan0",
        "x": 653.0000076293945,
        "y": 80.00000190734863,
        "wires": [
            [
                "4f9acc76.2b8254"
            ],
            [],
            []
        ]
    },
    {
        "id": "4f9acc76.2b8254",
        "type": "function",
        "z": "650ea4c6.6bf0dc",
        "name": "Extract wlan0",
        "func": "// Initialize variables\nvar tokens, inet, bcast, mask;\nvar wlan0 = {\n    \"ip\" : null,\n    \"bcast\" : null, \n    \"mask\" : null\n}\n\n// Parse the entire string by spaces, and put each item into an array called tokens\ntokens = msg.payload.split(\"\\n\", 4);\nmsg.tokens = tokens;\n\n// check if IP exists\nif (tokens[1].indexOf('inet') == -1) {\n    msg.wlan0 = wlan0;\n    return msg;\n}\n\n// split possible ip\ntokens[1] = tokens[1].substr(tokens[1].indexOf('inet'));\ninet = tokens[1].split(\" \");\n\nwlan0.ip = inet[1];\nwlan0.bcast = inet[7];\nwlan0.mask = inet[4];\n\n// Don't send a message if the IF is the known default. Change to default ip.\nif (wlan0.ip==\"192.168.0.120\") { \n    //outString = \"\"; // set output to null if ip is the same so no message is sent\n    msg.payload = \"NoIp\";\n} else {\n    // return the final output\n    msg.payload = wlan0.ip;\n}\n\nmsg.wlan0 = wlan0;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 840.0000610351562,
        "y": 67.00000190734863,
        "wires": [
            [
                "9414bd24.bfd72",
                "d1dba884.ba4b68"
            ]
        ]
    },
    {
        "id": "ced68678.708548",
        "type": "function",
        "z": "650ea4c6.6bf0dc",
        "name": "Set Globals",
        "func": "// Shloud data sent to IoTF\nglobal.set(\"sendIoTF\", true);\n\n// Is TJBot male ore female\nglobal.set(\"gender\", \"male\");\n\n// What is the default location \nglobal.set(\"location\", \"Linz\");\n\n// Set the necessary rotation for the 8x8 matrix\nglobal.set(\"rotation\",\"R270\");\n\n// Eye Settings \nglobal.set(\"eyeDelay\", 100);\nglobal.set(\"eyeShow\", false);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 333.01739501953125,
        "y": 214.01042556762695,
        "wires": [
            [
                "e35eb6c3.fabdc8"
            ]
        ]
    },
    {
        "id": "e35eb6c3.fabdc8",
        "type": "function",
        "z": "650ea4c6.6bf0dc",
        "name": "Def. SenseHAT",
        "func": "var senseHATImages = [];\nvar rotation = global.get(\"rotation\");\n\nvar sHImage = {\n    \"name\" : \"weather\",\n    \"image\" : [ \n        \"y\",\"y\",\"y\",\"e\",\"e\",\"e\",\"e\",\"e\",\n        \"y\",\"y\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\n        \"y\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\n        \"e\",\"e\",\"w\",\"w\",\"e\",\"e\",\"e\",\"e\",\n        \"e\",\"w\",\"e\",\"e\",\"w\",\"e\",\"e\",\"e\",\n        \"w\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\n        \"e\",\"w\",\"e\",\"e\",\"w\",\"e\",\"e\",\"e\",\n        \"e\",\"e\",\"w\",\"w\",\"e\",\"e\",\"e\",\"e\"\n        ],\n    \"sImage\": \"\"\n}\nsenseHATImages.push(sHImage);\n\nvar sHImage = {\n    \"name\" : \"no_light\",\n    \"image\" : [ \n        \"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\n        \"e\",\"e\",\"e\",\"x\",\"x\",\"e\",\"e\",\"e\",\n        \"e\",\"e\",\"x\",\"e\",\"e\",\"x\",\"e\",\"e\",\n        \"e\",\"x\",\"e\",\"e\",\"e\",\"e\",\"x\",\"e\",\n        \"e\",\"x\",\"e\",\"e\",\"e\",\"e\",\"x\",\"e\",\n        \"e\",\"e\",\"x\",\"e\",\"e\",\"x\",\"e\",\"e\",\n        \"e\",\"e\",\"e\",\"x\",\"x\",\"e\",\"e\",\"e\",\n        \"e\",\"e\",\"e\",\"x\",\"x\",\"e\",\"e\",\"e\"\n        ],\n    \"sImage\": \"\"\n}\nsenseHATImages.push(sHImage);\n\nvar xx_light = [ \n\"?\",\"e\",\"e\",\"?\",\"?\",\"e\",\"e\",\"?\",\n\"e\",\"?\",\"e\",\"x\",\"x\",\"e\",\"?\",\"e\",\n\"e\",\"e\",\"x\",\"e\",\"e\",\"x\",\"e\",\"e\",\n\"?\",\"x\",\"e\",\"e\",\"e\",\"e\",\"x\",\"?\",\n\"e\",\"x\",\"e\",\"e\",\"e\",\"e\",\"x\",\"e\",\n\"e\",\"?\",\"x\",\"e\",\"e\",\"x\",\"?\",\"e\",\n\"?\",\"e\",\"e\",\"x\",\"x\",\"e\",\"e\",\"?\",\n\"e\",\"e\",\"e\",\"x\",\"x\",\"e\",\"e\",\"e\"\n];\n\n// define the possible lights \nvar red_light = xx_light.slice();\nvar blue_light = xx_light.slice();\nvar yellow_light = xx_light.slice();\nvar white_light = xx_light.slice();\nvar green_light = xx_light.slice();\nfor (var y = 0; y < 8; y++) {\n    for (var x = 0; x < 8; x++) {\n        if (xx_light[y*8+x] == \"?\") {\n            red_light[y*8+x] = \"r\";         \n            blue_light[y*8+x] = \"b\";         \n            green_light[y*8+x] = \"g\";         \n            white_light[y*8+x] = \"w\";         \n            yellow_light[y*8+x] = \"y\";         \n        } else {\n            red_light[y*8+x] = xx_light[y*8+x];         \n            blue_light[y*8+x] = xx_light[y*8+x];         \n            green_light[y*8+x] = xx_light[y*8+x];         \n            white_light[y*8+x] = xx_light[y*8+x];         \n            yellow_light[y*8+x] = xx_light[y*8+x];         \n        }\n    }\n}\n\nsHImage = {\n    \"name\" : \"red_light\",\n    \"image\" :  red_light,\n    \"sImage\": \"\"\n}\nsenseHATImages.push(sHImage);\n\nsHImage = {\n    \"name\" : \"green_light\",\n    \"image\" :  green_light,\n    \"sImage\": \"\"\n}\nsenseHATImages.push(sHImage);\n\nsHImage = {\n    \"name\" : \"yellow_light\",\n    \"image\" :  yellow_light,\n    \"sImage\": \"\"\n}\nsenseHATImages.push(sHImage);\n\nsHImage = {\n    \"name\" : \"blue_light\",\n    \"image\" :  blue_light,\n    \"sImage\": \"\"\n}\nsenseHATImages.push(sHImage);\n\nsHImage = {\n    \"name\" : \"white_light\",\n    \"image\" :  white_light,\n    \"sImage\": \"\"\n}\nsenseHATImages.push(sHImage);\n\n    \nsHImage = {\n    \"name\" : \"smily\",\n    \"image\" :  [ \n        \"o\",\"o\",\"o\",\"e\",\"e\",\"o\",\"o\",\"o\",\n        \"w\",\"w\",\"w\",\"e\",\"e\",\"w\",\"w\",\"w\",\n        \"w\",\"b\",\"w\",\"e\",\"e\",\"w\",\"b\",\"w\",\n        \"w\",\"w\",\"w\",\"e\",\"e\",\"w\",\"w\",\"w\",\n        \"e\",\"e\",\"e\",\"y\",\"y\",\"e\",\"e\",\"e\",\n        \"r\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"r\",\n        \"e\",\"r\",\"r\",\"r\",\"r\",\"r\",\"r\",\"e\",\n        \"e\",\"e\",\"e\",\"r\",\"r\",\"e\",\"e\",\"e\"\n        ],\n    \"sImage\": \"\"\n}\nsenseHATImages.push(sHImage);\n\nsHImage = {\n    \"name\" : \"frusty\",\n    \"image\" :  [ \n        \"o\",\"o\",\"o\",\"e\",\"e\",\"o\",\"o\",\"o\",\n        \"w\",\"w\",\"w\",\"e\",\"e\",\"w\",\"w\",\"w\",\n        \"w\",\"b\",\"w\",\"e\",\"e\",\"w\",\"b\",\"w\",\n        \"w\",\"w\",\"w\",\"e\",\"e\",\"w\",\"w\",\"w\",\n        \"e\",\"e\",\"e\",\"y\",\"y\",\"e\",\"e\",\"e\",\n        \"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\n        \"e\",\"r\",\"r\",\"r\",\"r\",\"r\",\"r\",\"e\",\n        \"r\",\"r\",\"e\",\"e\",\"e\",\"e\",\"r\",\"r\"\n        ],\n    \"sImage\": \"\"\n}\nsenseHATImages.push(sHImage);\n\nsHImage = {\n    \"name\" : \"surprised\",\n    \"image\" :  [ \n        \"o\",\"o\",\"o\",\"e\",\"e\",\"o\",\"o\",\"o\",\n        \"w\",\"w\",\"w\",\"e\",\"e\",\"w\",\"w\",\"w\",\n        \"w\",\"b\",\"w\",\"e\",\"e\",\"w\",\"b\",\"w\",\n        \"w\",\"w\",\"w\",\"e\",\"e\",\"w\",\"w\",\"w\",\n        \"e\",\"e\",\"e\",\"y\",\"y\",\"e\",\"e\",\"e\",\n        \"e\",\"e\",\"r\",\"r\",\"r\",\"r\",\"e\",\"e\",\n        \"e\",\"e\",\"r\",\"e\",\"e\",\"r\",\"e\",\"e\",\n        \"e\",\"e\",\"r\",\"r\",\"r\",\"r\",\"e\",\"e\"\n        ],\n    \"sImage\": \"\"\n}\nsenseHATImages.push(sHImage);\n\nsHImage = {\n    \"name\" : \"nutreal\",\n    \"image\" :  [ \n        \"o\",\"o\",\"o\",\"e\",\"e\",\"o\",\"o\",\"o\",\n        \"w\",\"w\",\"w\",\"e\",\"e\",\"w\",\"w\",\"w\",\n        \"w\",\"b\",\"w\",\"e\",\"e\",\"w\",\"b\",\"w\",\n        \"w\",\"w\",\"w\",\"e\",\"e\",\"w\",\"w\",\"w\",\n        \"e\",\"e\",\"e\",\"y\",\"y\",\"e\",\"e\",\"e\",\n        \"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\"e\",\n        \"e\",\"r\",\"r\",\"r\",\"r\",\"r\",\"r\",\"e\",\n        \"e\",\"e\",\"r\",\"r\",\"r\",\"r\",\"e\",\"e\"\n        ],\n    \"sImage\": \"\"\n}\nsenseHATImages.push(sHImage);\n\n// convert all the images to a SenseHAT string\nfor (var i = 0; i < senseHATImages.length; i++) {\n    var sImage = \"\";\n    var first = true;\n    for (var y = 0; y < 8; y++) {\n        for (var x = 0; x < 8; x++) {\n            if (first === true) {\n                sImage = \"\";\n                if (rotation) {\n                    sImage = rotation + \"\\n\";\n                }\n                sImage = sImage + x + \",\" + y;\n                first = false;\n            } else {\n                sImage = sImage + \",\" + x + \",\" + y;\n            }\n            switch (senseHATImages[i].image[y*8+x]) {\n                case \"r\":\n                    sImage = sImage + \",red\";\n                    break;\n                case \"g\":\n                    sImage = sImage + \",green\";\n                    break;\n                case \"b\":\n                    sImage = sImage + \",blue\";\n                    break;\n                case \"y\":\n                    sImage = sImage + \",yellow\";\n                    break;\n                case \"p\":\n                    sImage = sImage + \",purple\";\n                    break;\n                case \"m\":\n                    sImage = sImage + \",magenta\";\n                    break;\n                case \"l\":\n                    sImage = sImage + \",oldlace\";\n                    break;\n                case \"o\":\n                    //sImage = sImage + \",210,105,30\";\n                    sImage = sImage + \",orange\";\n                    break;\n                case \"i\":\n                    sImage = sImage + \",pink\";\n                    break;\n                case \"x\":\n                    sImage = sImage + \",192,192,192\";\n                    break;\n                case \"w\":\n                    sImage = sImage + \",white\";\n                    break;\n                default:\n                    sImage = sImage + \",off\";\n                    break;\n            }    \n        }\n    }\n    senseHATImages[i].sImage = sImage;\n}\n\n// save Images to global\nglobal.set(\"senseHATImages\", senseHATImages);\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 518.017391204834,
        "y": 214.0104274749756,
        "wires": [
            []
        ]
    },
    {
        "id": "d1dba884.ba4b68",
        "type": "debug",
        "z": "650ea4c6.6bf0dc",
        "name": "IP-Adresse",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 1034,
        "y": 16,
        "wires": []
    }
]